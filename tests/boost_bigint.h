#include <iostream>
#include <vector>
#include <chrono>
#include <random>

#include <boost/multiprecision/cpp_int.hpp>
#include "../BigInt.h"

using namespace boost::multiprecision;

BigInt mul1(std::string num1, std::string num2) // my Bigint
{
    BigInt a(num1);
    BigInt b(num1);
    return a * b;
}

cpp_int mul2(std::string num1, std::string num2) // my Bigint
{
    cpp_int a(num1);
    cpp_int b(num1);
    return a * b;
}

void test_boost_bigint()
{
    std::random_device rd;
    std::mt19937 gen(rd());
    long long minValue = std::numeric_limits<long long>::min();
    long long maxValue = std::numeric_limits<long long>::max();
    std::uniform_int_distribution<> distr(minValue, maxValue);
    const int count = 100000;

    std::vector<cpp_int> arr1(count);
    std::vector<BigInt> arr2(count);

    for (int i = 0; i < count; ++i) // create an array of the same numbers and the same order
    {
        int a = distr(gen);
        arr1[i] = cpp_int(a);
        arr2[i] = BigInt(a);
    }
    // std::string num = "62850065362737716363555697200032469961306652824516951672731618313938675587912782649337580400110592113722708391235184597091074806698526960809091818729785015740645445482644710786333865991131888101377463189844967459890115403342593153477400821107348184715212533745072715381310482966129790814776632697913945703573905374227645982607988112787546563130077857434841896108094991194360375610753263594141434768824946925307877906932752908959099450652720719794196827418408198305674976880862364608193456236377024678150731334661979231199391171959793528331174968205005772999385664769842608155189408667763208554831598361888504483399113515051329097039900889190631333758040948869558954659126481045346214302957333759928989593296644446869006486745316618788212971941461919141329786733752837029951907061799241781402493562850065362737716363555697200032469961306652824516951672731618313938675587912782649337580400110592113722708391235184597091074806698526960809091818729785015740645982607988112787546563130077857434841896108094991194360375610753263594141434768824946925307877906932752908959099450652720719794196827418408198305674976880862364608193456236377024678150731334661979231199391171959793528331174968205005772999385664769842608155189408667763208554831598361888504483399113515051329097039900889190631333758040948869558954659126481045346214302957333759928989593296644446869006486745316618788212971941461919141329786733752837029951907061799241781402493562850065362737716363555697200032469961306652824516951672731618313938675587912782649337580400110592113722708391235184597091074806698526960809091818729785015740645445482644710786333865991131888101377463189844967459890115403342593153477400821107348184715212533745072715381310482966129790814776632697913945703573905374227697796338115683962232084025970251553047343898831093766285006536273771636355569720003246996130665282451695167273161831393867558791278264933758040011059211372270839123518459709107480669852696080909181872978501574064544548264471078633386599113188810137746318984496745989011540334259315347740082110734818471521253374507271538131048296612979081477663269791394570357390537422764598260798811278754656313007785743484189610809499119436037561075326359414143476882494692530787790693275290895909945065272071979419682741840819830567497688086236460819345623637702467815073133466197923119939117195979352833117496820500577299938566476984260815518940866776320855483159836188850448339911351505132909703990088919063133375804094886955895465912648104534621430295733375992898959329664444686900648674531661878821297194146191914132978673375283702995190706179924178140249356285006536273771636355569720003246996130665282451695167273161831393867558791278264933758040011059211372270839123518459709107480669852696080909181872978501574064598260798811278754656313007785743484189610809499119436037561075326359414143476882494692530787790693275290895909945065272071979419682741840819830567497688086236460819345623637702467815073133466197923119939117195979352833117496820500577299938566476984260815518940866776320855483159836188850448339911351505132909703990088919063133375804094886955895465912648104534621430295733375992898959329664444686900648674531661878821297194146191914132978673375283702995190706179924178140249356285006536273771636355569720003246996130665282451695167273161831393867558791278264933758040011059211372270839123518459709107480669852696080909181872978501574064544548264471078633386599113188810137746318984496745989011540334259315347740082110734818471521253374507271538131048296612979081477663269791394570357390537422769779633811568396223208402597025155304734389883109376";

    auto start = std::chrono::high_resolution_clock::now();
    std::sort(arr2.begin(), arr2.end());
    // mul1(num, num);
    auto end = std::chrono::high_resolution_clock::now();

    auto duration1 = std::chrono::duration_cast<std::chrono::microseconds>(end - start);
    std::cout << "Function duration for my Bigint: " << duration1.count() << " microseconds" << std::endl;

    start = std::chrono::high_resolution_clock::now();
    std::sort(arr1.begin(), arr1.end());
    // mul2(num, num);
    end = std::chrono::high_resolution_clock::now();

    auto duration2 = std::chrono::duration_cast<std::chrono::microseconds>(end - start);
    std::cout << "Function duration for boost Bigint: " << duration2.count() << " microseconds\n " << std::endl;

    std::cout << "diff: " << duration2.count() - duration1.count();
}